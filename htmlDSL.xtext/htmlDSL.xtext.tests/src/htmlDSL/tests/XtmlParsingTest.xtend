/*
 * generated by Xtext 2.27.0
 */
package htmlDSL.tests

import com.google.inject.Inject
import htmlDSL.xtml.Document
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(XtmlInjectorProvider)
class XtmlParsingTest {
	@Inject
	ParseHelper<Document> parseHelper
	
	def Document loadModel(String src) {
		val doc = parseHelper.parse(src)
		return doc
	}
	
	@Test
	def void testContainer() {
		val doc = loadModel('''
			// comment
			Container c
			c add(a, b, d, e, f)
			Container d(a, b, d, e, f)
			c add(g, h, i)
			c size(1)
		''')
		Assertions.assertNotNull(doc)
		Assertions.assertNotNull(doc.expressions)
		doc.expressions.forEach[x | println(x)]
		val e = doc.expressions.get(3)
		println(e.eContents())
		//doc.textDefinition.forEach[x | println(x)]
		//doc.textEdition.forEach[x | println(x)]
		val errors = doc.eResource.errors
		println(errors)
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	

	@Test
	def void testGrid() {
		val doc = loadModel('''
			// comment
			Container d
			Container c
			Text t "my text"
			c grid(
				c d t
				d t d
				c d t
			)
		''')
		Assertions.assertNotNull(doc)
		Assertions.assertNotNull(doc.expressions)
		doc.expressions.forEach[x | println(x.class)]
		val e = doc.expressions.get(3)
		println(e)
		//doc.textDefinition.forEach[x | println(x)]
		//doc.textEdition.forEach[x | println(x)]
		val errors = doc.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
	@Test
	def void testText() {
		val doc = loadModel('''
			Text t "Hello"
			t text("No")
			t color("dnd")
			t href("http://test.tst")
			t font("dddd")
		''')
		Assertions.assertNotNull(doc)
		Assertions.assertNotNull(doc.expressions)
		doc.expressions.forEach[x | println(x)]
		val e = doc.expressions.get(3)
		println(e.eContents())
		val errors = doc.eResource.errors
		println(errors)
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
	
	
}
